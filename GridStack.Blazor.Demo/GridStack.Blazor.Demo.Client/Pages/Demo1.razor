@page "/"
@using GridStack.Blazor.Demo.Client.Components

<PageTitle>Demo 1: Overview</PageTitle>

<div class="page">
    <div class="title">
        <h3>Demo 1: Overview</h3>
    </div>

    <div class="header">
        <button class="button" @onclick="@OnAddWidget">Add widget</button>
        <button class="button" @onclick="@OnAddMultipleWidgets">Add 3 widgets</button>
        <button class="button" @onclick="@OnToggleEnabledState">@(_isDisabled ? "Enable grid" : "Disable grid")</button>
        <button class="button" @onclick="@OnCompact">Compact</button>
        <button class="button" @onclick="@OnToggleColumns">@(_has6Columns ? "12 columns" : "6 columns")</button>
    </div>

    <div class="grid-wrapper">
        <div class="@(_isDisabled ? "grid-disabled" : "grid-enabled")">

            <GsGrid
                @ref="@_grid"
                Options="@_gsGridOptions"
                OnLoaded="@OnGridLoaded"
                OnAdded="@OnWidgetsAdded"
                OnChange="@OnWidgetsChange"
                OnDisable="@OnGridDisabled"
                OnDragStart="@OnWidgetDragStart"
                OnDrag="@OnWidgetDrag"
                OnDragStop="@OnWidgetDragStop"
                OnDropped="@OnWidgetDropped"
                OnEnable="@OnGridEnabled"
                OnResizeStart="@OnWidgetResizeStart"
                OnResize="@OnWidgetResize"
                OnResizeStop="@OnWidgetResizeStop">

                @for (var i = 0; i < MarkupWidgets.Length; i++)
                {
                    var type = MarkupWidgets[i];
                    var id = $"markup-{i}";

                    <GsWidget Options="@GetWidgetOptions(type, id)">
                        <AppWidget
                            Id=@id
                            CanDelete="@(!_isDisabled)"
                            WidgetType=@type
                            OnDelete="@OnDeleteWidget"/>
                    </GsWidget>
                }
            </GsGrid>

        </div>
    </div>

</div>

@code{

    private static readonly WidgetType[] MarkupWidgets =
    {
        WidgetType.Value,
        WidgetType.Graph,
        WidgetType.Value
    };

    private static uint _count;

    private readonly GsGridOptions _gsGridOptions = new()
    {
        AlwaysShowResizeHandle = true,
        Float = true,
        MaxRow = 6,
        MinRow = 2,
        Margin = "10px",
        Draggable = new GsDraggableOptions
        {
            Scroll = true
        }
    };
    
    private readonly GsWidgetOptions _gsMarkupValueAppWidgetOptions = new()
    {
        AutoPosition = true,
        NoResize = true,
        MinW = 2,
        MinH = 2
    };

    private readonly GsWidgetOptions _gsMarkupGraphAppWidgetOptions = new()
    {
        AutoPosition = true,
        NoResize = false,
        W = 4,
        H = 4,
        MinW = 4,
        MinH = 2,
        MaxW = 6,
        MaxH = 4
    };

    private readonly GsWidgetOptions _gsRuntimeWidgetOptions = new()
    {
        W = 1,
        H = 1,
        MaxH = 2,
        MaxW = 2,
        AutoPosition = true
    };

    private GsGrid _grid = null!;
    private bool _isDisabled;
    private bool _has6Columns;

    private GsWidgetOptions GetWidgetOptions(WidgetType widgetType, string id)
    {
        return widgetType switch
        {
            WidgetType.Value => _gsMarkupValueAppWidgetOptions with
            {
                Id = id
            },
            WidgetType.Graph => _gsMarkupGraphAppWidgetOptions with
            {
                Id = id
            },
            _ => throw new NotImplementedException()
        };
    }

    private async Task OnAddWidget()
    {
        var id = $"runtime-{_count++}";

        var options = _gsRuntimeWidgetOptions with
        {
            Id = id,
            Content = $"<div>{id}</div>"
        };

        var willItFit = await _grid.WillItFit(options);

        if (willItFit)
        {
            var widget = await _grid.AddWidget(options);   
            Console.WriteLine($"runtime widget added {widget}");
        }
        else
        {
            Console.WriteLine("cannot fit additional widget");
        }
    }

    private async Task OnAddMultipleWidgets()
    {
        await _grid.BatchUpdate();

        for (var i = 0; i < 3; i++)
        {
            await OnAddWidget();
        }

        await _grid.BatchUpdate(false);
    }

    private async Task OnDeleteWidget(string id)
    {
        await _grid.RemoveWidget(id);
        await _grid.Compact();
    }

    private async Task OnToggleEnabledState()
    {
        if (_isDisabled)
        {
            await _grid.Enable();
        }
        else
        {
            await _grid.Disable();
        }
    }

    private async Task OnToggleColumns()
    {
        if (_has6Columns)
        {
            await _grid.SetColumnCount(12);
        }
        else
        {
            await _grid.SetColumnCount(6);
        }

        _has6Columns = !_has6Columns;
    }

    private async Task OnCompact()
    {
        await _grid.Compact(GsCompact.List);
    }

    private async Task OnGridLoaded()
    {
        Console.WriteLine("loaded");
        await _grid.Enable();
    }

    private static void OnWidgetsAdded(GsWidgetListEventArgs args)
    {
        Console.WriteLine("added");

        foreach (var widget in args.Widgets)
        {
            Console.WriteLine($"\t{widget}");
        }
    }

    private static void OnWidgetsChange(GsWidgetListEventArgs args)
    {
        Console.WriteLine("change");

        foreach (var widget in args.Widgets)
        {
            Console.WriteLine($"\t{widget}");
        }
    }

    private void OnGridDisabled()
    {
        Console.WriteLine("disabled");
        _isDisabled = true;
    }

    private static void OnWidgetDragStart(GsWidgetEventArgs args)
    {
        Console.WriteLine("drag start");
        Console.WriteLine($"\t{args.Widget}");
    }

    private static void OnWidgetDrag(GsWidgetEventArgs args)
    {
        Console.WriteLine("drag");
        Console.WriteLine($"\t{args.Widget}");
    }

    private static void OnWidgetDragStop(GsWidgetEventArgs args)
    {
        Console.WriteLine("drag stop");
        Console.WriteLine($"\t{args.Widget}");
    }

    private static void OnWidgetDropped(GsWidgetDroppedEventArgs args)
    {
        Console.WriteLine("dropped");
        Console.WriteLine($"\t{args.PreviousWidget} => {args.NewWidget}");
    }

    private void OnGridEnabled()
    {
        Console.WriteLine("enabled");
        _isDisabled = false;
    }

    private static void OnWidgetResizeStart(GsWidgetEventArgs args)
    {
        Console.WriteLine("resize start");
        Console.WriteLine($"\t{args.Widget}");
    }

    private static void OnWidgetResize(GsWidgetEventArgs args)
    {
        Console.WriteLine("resize");
        Console.WriteLine($"\t{args.Widget}");
    }

    private static void OnWidgetResizeStop(GsWidgetEventArgs args)
    {
        Console.WriteLine("resize stop");
        Console.WriteLine($"\t{args.Widget}");
    }

}